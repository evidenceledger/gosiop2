{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List Accounts",
        "description": "List Accounts.",
        "operationId": "listAccount",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Account list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new Account",
        "description": "Creates a new Account and persists it to storage.",
        "operationId": "createAccount",
        "requestBody": {
          "description": "Account to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "credentials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "created_at",
                  "updated_at"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Find a Account by ID",
        "description": "Finds the Account with the requested ID and returns it.",
        "operationId": "readAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Account",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes a Account by ID",
        "description": "Deletes the Account with the requested ID.",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Account",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Account with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Updates a Account",
        "description": "Updates a Account and persists changes to storage.",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Account",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Account properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "credentials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/credentials": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List attached Credentials",
        "description": "List attached Credentials.",
        "operationId": "listAccountCredentials",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Account",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Accounts list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account_CredentialsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/keys": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List attached Keys",
        "description": "List attached Keys.",
        "operationId": "listAccountKeys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Account",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Accounts list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account_KeysList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "List Credentials",
        "description": "List Credentials.",
        "operationId": "listCredential",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Credential list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Create a new Credential",
        "description": "Creates a new Credential and persists it to storage.",
        "operationId": "createCredential",
        "requestBody": {
          "description": "Credential to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "raw": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "account": {
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "raw",
                  "created_at",
                  "updated_at"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credential created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/credentials/{id}": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "Find a Credential by ID",
        "description": "Finds the Credential with the requested ID and returns it.",
        "operationId": "readCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Credential",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credential with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Credential"
        ],
        "summary": "Deletes a Credential by ID",
        "description": "Deletes the Credential with the requested ID.",
        "operationId": "deleteCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Credential",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Credential with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Credential"
        ],
        "summary": "Updates a Credential",
        "description": "Updates a Credential and persists changes to storage.",
        "operationId": "updateCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Credential",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Credential properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "raw": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "account": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credential updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/credentials/{id}/account": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "Find the attached Account",
        "description": "Find the attached Account of the Credential with the given ID",
        "operationId": "readCredentialAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Credential",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account attached to Credential with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential_AccountRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/private-keys": {
      "get": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "List PrivateKeys",
        "description": "List PrivateKeys.",
        "operationId": "listPrivateKey",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PrivateKey list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrivateKeyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "Create a new PrivateKey",
        "description": "Creates a new PrivateKey and persists it to storage.",
        "operationId": "createPrivateKey",
        "requestBody": {
          "description": "PrivateKey to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kty": {
                    "type": "string"
                  },
                  "alg": {
                    "type": "string"
                  },
                  "jwk": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "account": {
                    "type": "integer"
                  }
                },
                "required": [
                  "kty",
                  "jwk",
                  "created_at",
                  "updated_at"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PrivateKey created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKeyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/private-keys/{id}": {
      "get": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "Find a PrivateKey by ID",
        "description": "Finds the PrivateKey with the requested ID and returns it.",
        "operationId": "readPrivateKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PrivateKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PrivateKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKeyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "Deletes a PrivateKey by ID",
        "description": "Deletes the PrivateKey with the requested ID.",
        "operationId": "deletePrivateKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PrivateKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "PrivateKey with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "Updates a PrivateKey",
        "description": "Updates a PrivateKey and persists changes to storage.",
        "operationId": "updatePrivateKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PrivateKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "PrivateKey properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kty": {
                    "type": "string"
                  },
                  "alg": {
                    "type": "string"
                  },
                  "jwk": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "account": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PrivateKey updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKeyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/private-keys/{id}/account": {
      "get": {
        "tags": [
          "PrivateKey"
        ],
        "summary": "Find the attached Account",
        "description": "Find the attached Account of the PrivateKey with the given ID",
        "operationId": "readPrivateKeyAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PrivateKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account attached to PrivateKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey_AccountRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/public-keys": {
      "get": {
        "tags": [
          "PublicKey"
        ],
        "summary": "List PublicKeys",
        "description": "List PublicKeys.",
        "operationId": "listPublicKey",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PublicKey list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicKeyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Create a new PublicKey",
        "description": "Creates a new PublicKey and persists it to storage.",
        "operationId": "createPublicKey",
        "requestBody": {
          "description": "PublicKey to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kty": {
                    "type": "string"
                  },
                  "alg": {
                    "type": "string"
                  },
                  "jwk": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "kty",
                  "jwk",
                  "created_at",
                  "updated_at"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PublicKey created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/public-keys/{id}": {
      "get": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Find a PublicKey by ID",
        "description": "Finds the PublicKey with the requested ID and returns it.",
        "operationId": "readPublicKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PublicKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PublicKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Deletes a PublicKey by ID",
        "description": "Deletes the PublicKey with the requested ID.",
        "operationId": "deletePublicKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PublicKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "PublicKey with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Updates a PublicKey",
        "description": "Updates a PublicKey and persists changes to storage.",
        "operationId": "updatePublicKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PublicKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "PublicKey properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kty": {
                    "type": "string"
                  },
                  "alg": {
                    "type": "string"
                  },
                  "jwk": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PublicKey updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivateKey"
            }
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credential"
            }
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "AccountCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "AccountList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "AccountRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "Account_CredentialsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "Account_KeysList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "Credential": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "CredentialCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "CredentialList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "CredentialRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "CredentialUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "raw": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "created_at",
          "updated_at"
        ]
      },
      "Credential_AccountRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKeyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKeyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKeyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKeyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PrivateKey_AccountRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "PublicKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PublicKeyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PublicKeyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PublicKeyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      },
      "PublicKeyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kty": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "jwk": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "maximum": 255,
              "minimum": 0
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "kty",
          "jwk",
          "created_at",
          "updated_at"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}